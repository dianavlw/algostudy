Project Euler

Notes:

a[-1] is the last elementin array
a[-2] is the second to last element in array
s[::-1] reversed the string #splice a string, backwards 
for i in range(n) loop

Factors and Multiples:

Factor aka divisor of a number even divides it:
10 is a factor of 20
20 // 10 = 2

3 is a factor of 12 
12 / 3 == 4

Multiple of a number n is any integer times n:
20 is a multiple of 10
10 * 2 = 20
12 is a multple of 3
3 * 4 = 12

Problem 1.

Multiples of 3 and 5.
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

solve by using a for loop

sum = 0
for i in range(1, 1000):
    if i % 3 == 0 or i % 5 == 0:
         sum += i
print(sum)
Answer:  233168




Problem 2. 
Even Fibonacci Numbers.
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

fib = [1, 2]

while True:
  next = fib[-1] + fib[-2]
  if next > 4000000:
    break
  fib.append(next)
#getting all the fib numbers
sum = 0
for n in fib:
  if n % 2 == 0:
    sum += n
#printing all the even fib nums
print(sum)
Answer:  4613732
    
    
    
    
Problem 3. 
Largest Prime Factor:
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

#generate prime num then check if its a prime factor
# A factor is a whole number that evenly divides another number. 
# That is, dividing the number by the factor results in a remainder of 0. 
#For example, the factors of 4 are -4 , -2 , -1 , 1 , 2 , and 4 .
24 = 4 * 6
24 = 24 * 1
24 = 2 * 12
12 = 2 * 6
6 = 2 * 3
3 = 3* 1
24 is not a prime number, its not a perfect square.
Prime factors are factors of a number that are, themselves, prime numbers. 
#list all primes or number = 600851475143
primes = []
i = 2
n = 600851475143

while i * i <=n:
    is_prime = True
    for p in primes:
        if p * p > i:
            break
        if i % p == 0:
            is_prime = False
            break
    if is_prime:
        primes.append(i
    i += 1
print(primes)

#get largest
largest_prime = 0
for p in primes:
    if n %. p == 0:
       largest_prime = p
print(largest_prime)
                      
OR
def largestPrime(n):
  i = 2
  while i<n:
    if n%i == 0:
        n = n//i
    else:
      i += 1
  return n
print(largestPrime(600851475143))
Answer:  6857
                      
                      
                      
Problem 4. 
                      
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.                     
# 3-digit number starts at 100 up to but not including 1000
largest_pali = 0

for a in range(100, 1000):
    for b in range(a, 1000):
        c = a * b
        s = str(c)
        if s == s[::-1]: #reverse a string
           if c > largest_pali:
              largest_pali = c
print(largest_pali)
Answer:  906609
                      
                      
                      
                      
Problem 5.
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

GCD: Greates Common Divisor
5 is gcd of 15 and 25
12 is for 12 and 24
                      
LCM = Least Common Multiple                     
30 is the lcm of 10 and 15                       
24 is the lcm of 12 and 24
                      
            2520 = 2*2*2*3*5*7 
             /\         
         252   10        
         /\    /\          
       126(2)(5)(2)   
       /\               
     63 (2)               
     /\                 
    9 (7)               
   /\                   
  (3)(3)                  
                      
def check(n):
   for i in range(11, 21):
     if n % i ==0:
       continue
    else:
       return True
   return True
                      
                      
x = 2520
 while not check(x):
  x += 2520
print(x)
Answer:  232792560                      
                      
                      
Problem 6.SUm Square difference:
The sum of the square of the first tehn natural numebers is, 1^2+ 2^2 + ...10^2 = 385
The square of the sum of the first ten natural numbers is, (1+2+...+10) ^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square
of the sum is 3025 -385 = 2640                      
Find the difference between the sum of the squares of the first hundred natural numbers and the square of the sum.                      
                      
sumOfSquares = 0
for i in range(1, 101):
    sumOfSquares = i * i

squareOfSum = 0
for i in range(1, 101):
    squaredOfSum += i                      
squaredOfSum = squaredOfSum * squaredOfSum
                      
print(squaredOfSums - sumOfSquares)                      
                      
                      
sum_square = 0
sum = 0
square_sum = 0

for i in range(1,101):
    sum_square += i*i
print(sum_square)

for i in range(1,101):
    sum += i
square_sum = sum*sum
print(square_sum)

print(square_sum - sum_square)                     
Answer:  25164150                      
                      
Problem 7. 10001st prime.                      
By Listing the first six prime numbers: 2, 3, 5, 7, 11 and 13, we can see that the 6th prime is 13.
what is the 10001st prime?
*Prime numbers are the numbers that have only two factors, that are, 1 and the number itself.
#Python
number = 1
count = 1
while number <= 10001:
    count += 1
    for i in range(count - 1, 0, -1):
        if  count % i == 0 and i != 1:
            break
        elif i == 1:
            print('Number ', number, ' = ', count)
            number += 1                      
                      

def isprime(n):
    if n < 2: return False
    if n < 4: return True
    if n%2 == 0 or n%3 == 0: return False
    for i in range(2,n):
        if n%i == 0: return False
        if i*i > n: return True

def nth_prime(n):
    pn = 0
    list_of_primes = []
    i = 1
    while pn < n:
        if isprime(i):
            pn += 1
            solution = i
        i += 1
    return solution

print (nth_prime(10001))                     
Answer:  104743                      
                      
Problem 8. Largest product in a series
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
7*3*1*6 = 126
3*1*6*7 = 126
1*6*7*1 = 42
.
.... 9*9*8*9 = 5832                       
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
821663704844031(9*9*8*9)0008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?                      
Source: https://www.youtube.com/watch?v=__Rg_3NL2Dg                      

number ="73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"                      

largest_so_far = 0
current = 1
how_many_digits = 13
for i in range(len(number) - how_many_digits):
    for j in range(how_many_digits):
        current *= int(number[i+j])
    if current > largest_so_far:
        largest_so_far = current
    current = 1
print(largest_so_far)
23514624000
                      
                      
Problem 9. Special Pythagorean triplet
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.                     
                      
Solutions:
                      
                      
                   
# python
for c in range(1000):
    for b in range(c):
        for a in range(b):
            if c**2 == a**2 + b**2 and a + b + c == 1000:
                print(a*b*c)     
                      
                      
                   
for a in range(1,1000):
    for b in range(1,1000):
        c=1000-a-b        
        if a**2+b**2==c**2:
                k=int(a*b*c)
                break
print(k)                      
                      
                      
                   
def main():
  sum_total = 1000

  for c in range(sum_total):                      
    for b in range(c):                      
      for a in range(b):               
        if a + b + c == sum_total:            
            if is_triplet(a,b,c):         
                  #print(a,b,c)      
                #print(a*b*c)     
                        
def is_triplet(a,b,c):
  if(a**2 + b**2) == c**2:
    print('True', a,b,c)               
    return(True)               
  else:                  
    return(False)            
main()                      
Answer:  31875000
   
                      
                      
                      
Problem 10. Summation of primes
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.                     

                      

def isprime(n):
    if n < 2: return False
    if n < 4: return True
    if n%2 == 0 or n%3 == 0: return False
    for i in range(2,n):
        if n%i == 0: return False
        if i*i > n: return True

def nth_prime(n):
    pn = 0
    list_of_primes = []
    i = 1
    while pn < n:
        if isprime(i):
            pn += 1
            solution = i
        i += 1
    return solution

print sum((nth_prime(10))                      
                      
                      
                      
                      
                      
                      
                      
